// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        outlineColor: { value: [1.0, 1.0, 1.0, 1.0], editor: {type: color} } 
        outlineWidth: {
              value: 1.0,
              editor: { 
                type: number, 
                min: 0.0, 
                max: 1.0,
                step: 1
              }
            }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec2 uv0;

   layout(set = 2, binding = 0) uniform UserUniforms {
    vec4 outlineColor;  // Outline color as a vector
    float outlineWidth;  // Outline width as a float
  };

 #if USE_TEXTURE
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = texture(cc_spriteTexture, uv0);
    float outline = 0.0;

    #if USE_TEXTURE
      for (float x = -1.0; x <= 1.0; x++) {
        for (float y = -1.0; y <= 1.0; y++) {
          vec2 uvOffset = vec2(x, y) * outlineWidth; 
          outline += texture(cc_spriteTexture, uv0 + uvOffset).a; // Check surrounding pixels for outline
        }
      }

      float alpha = texture(cc_spriteTexture, uv0).a;
      if (alpha == 0.0 && outline > 0.0) {
        o = outlineColor;  // Set fragment color to outline color
      } 
      else {
        o = texture(cc_spriteTexture, uv0) * color;
      }
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    return o;
  }
}%
